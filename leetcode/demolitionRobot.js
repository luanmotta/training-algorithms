const solution = (grid) => {
  const rows = grid.length;
  const cols = grid[0].length;
  const visited = Array(rows)
    .fill()
    .map(() => Array(cols).fill());
  const directions = [
    [1, 0],
    [0, 1],
    [-1, 0],
    [0, -1],
  ];
  let shortestPath = Infinity;

  const bfs = (cI, cJ, steps) => {
    visited[cI][cJ] = steps;

    for (let d = 0; d < directions.length; d++) {
      const [dI, dJ] = directions[d];
      const adjI = cI + dI;
      const adjJ = cJ + dJ;

      if (!grid[adjI]) continue;

      if (grid[adjI][adjJ] === 9 && steps < shortestPath) {
        shortestPath = steps;
        return;
      }

      if (
        grid[adjI][adjJ] === 1 &&
        (!visited[adjI][adjJ] || steps < visited[adjI][adjJ])
      ) {
        bfs(adjI, adjJ, steps + 1);
      }
    }
  };

  bfs(0, 0, 0);
  return shortestPath === Infinity ? -1 : shortestPath + 1;
};

console.log(
  solution([
    [1, 0, 0],
    [1, 0, 0],
    [1, 9, 1],
  ])
);

console.log(
  solution([
    [1, 0, 0, 0, 1, 9],
    [1, 0, 0, 0, 1, 1],
    [1, 1, 1, 1, 1, 1],
    [1, 0, 1, 1, 1, 1],
    [1, 0, 0, 0, 1, 1],
  ])
);

console.log(
  solution([
    [1, 0, 0, 0, 1, 9],
    [1, 0, 0, 0, 1, 0],
    [1, 1, 1, 1, 1, 1],
    [1, 0, 1, 1, 1, 1],
    [1, 0, 0, 0, 1, 1],
  ])
);

console.log(
  solution([
    [1, 0, 0, 0, 0, 9],
    [1, 0, 0, 0, 1, 1],
    [1, 1, 1, 1, 1, 1],
    [1, 0, 1, 1, 1, 1],
    [1, 0, 0, 0, 1, 1],
  ])
);

console.log(
  solution([
    [1, 0, 0, 0, 0, 9],
    [1, 0, 0, 0, 0, 1],
    [1, 1, 1, 1, 1, 1],
    [1, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 1, 1],
  ])
);

console.log(
  solution([
    [1, 0, 0, 0, 0, 9],
    [1, 0, 0, 0, 0, 0],
    [1, 1, 1, 1, 1, 1],
    [1, 0, 1, 1, 1, 1],
    [1, 0, 0, 0, 1, 1],
  ])
);

console.log(
  solution([
    [1, 0, 1, 0, 0, 0],
    [1, 1, 1, 0, 0, 0],
    [1, 0, 1, 1, 1, 1],
    [0, 0, 1, 1, 1, 1],
    [9, 1, 1, 1, 1, 1],
  ])
);

console.log(
  solution([
    [1, 1, 1, 0, 0, 0],
    [1, 0, 1, 1, 1, 0],
    [0, 9, 1, 1, 1, 1],
    [0, 1, 0, 1, 1, 1],
    [0, 1, 1, 1, 1, 1],
  ])
);

console.log(
  solution([
    [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0],
    [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0],
    [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0],
    [1, 1, 1, 0, 0, 9, 0, 1, 0, 0, 0],
    [0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0],
    [1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0],
    [1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0],
    [1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1],
    [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1],
    [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1],
    [1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
  ])
);

console.log(
  solution([
    [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0],
    [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0],
    [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0],
    [1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0],
    [0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0],
    [1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0],
    [1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0],
    [1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1],
    [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1],
    [0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1],
    [1, 1, 1, 0, 1, 1, 1, 1, 1, 9, 1],
    [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
  ])
);

console.log(
  solution([
    [1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0],
    [1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0],
    [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0],
    [1, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0],
    [0, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0],
    [1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0],
    [1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0],
    [1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1],
    [1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1],
    [0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1],
    [1, 1, 1, 0, 1, 1, 1, 1, 1, 9, 1],
    [1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0],
  ])
);
