const equals = (result, expected) => {
  if (typeof expected === 'object') {
    for (let i = 0; i < result.length || i < expected.length; i++) {
      if (result[i] !== expected[i]) {
        return false
      }
    }
    return true
  } else {
    return result === expected
  }
}

// Tests
const test = (params, expected) => {
  const result = solution(...params), color = equals(result, expected) ? '\x1b[32m' : '\x1b[31m', reset = '\x1b[0m'
  console.log(`${params} | expected ${expected} get ${result}`, color, `${equals(result, expected)}\n`, reset)
}


/*
Even Fibonacci numbers

Each new term in the Fibonacci sequence is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million,
find the sum of the even-valued terms.

*/

function solution(limit) {
  let sum = 2
  let p1 = 1
  let p2 = 2
  let current = 0
  while (true) {
    current = p1 + p2
    if (current <= limit) {
      if (current % 2 === 0) {
        sum += current
      }
      p1 = p2
      p2 = current
    } else {
      return sum
    }
  }
}

/*

*/
test([8], 10)
test([33], 10)
test([34], 44)
test([35], 44)
test([4000000], 4613732)
/*

*/